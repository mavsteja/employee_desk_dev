from pydantic import BaseModel,Field,ConfigDict

class ChatRequest(BaseModel):
    user_email:str | None = Field(default=None,description="User email")
    conversation_id:str | None = Field(default=None,description="Conversation ID")
    conversation:dict | None = Field(default=None,description="Conversation logs")

class ChatResponse(BaseModel):
    id:str | None = Field(default=None,description="UUID of the Conversation thread")
    query: str | None = Field(default=None,description="User query",)
    answer: str | None = Field(default=None,description="Response generated by the LLM")
    followup_questions: list[str] | None = Field(default=None,description="Follow-up questions generated by the LLM")
    conversation_id: str | None = Field(default=None,description="Conversation ID from the frontend")
    user_email: str | None = Field(default=None,description= "User Email who is sending the request from Frontend")
    class_label:str | None = Field(default=None,description="Classification label of the user query")
    subclass_label: str | None = Field(default=None,description="Subclass label of the user query")
    context_id: list[str] | None = Field(default=[],description="ID of the top-k relevant documents used to answer")
    search_query: str | None = Field(default=None,description="Modified user query used for retrieving relevant documents")
    total_time: float | None = Field(default=None,description="Total time taken to process the query",gt=0)
    prompt_tokens: int | None = Field(default=None,description="Input token length",gt=0)
    completion_tokens: int | None = Field(default=None,description="Output token length",gt=0)
    total_tokens: int | None = Field(default=None,description="Input + output tokens",gt=0)
    total_cost: float | None = Field(default=None,description="Total cost of the query",gt=0.0)
    model_name: str | None = Field(default=None,description="Name and version of the LLM used")
    timestamp: str | None = Field(default=None,description="Timestamp at which the answer is sent back")
    context: str | None = Field(default=None,description="Concatenated context for debug")
    memory: list[dict] | None = Field(default=None,description="Memory of the conversation")
    model_config = ConfigDict(extra='ignore')